swagger: '2.0'
info:
  description: This is a simple Location API for use with a sample Flutter app.
  version: 1.0.0
  title: Location API
host: dev.adimo.uk
basePath: /users/
schemes:
  - https
paths:
  /:
    get:
      tags:
        - Main API
      summary: Obtain a list of all Users
      description: ''
      operationId: getUsers
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/{id}':
    get:
      tags:
        - Main API
      summary: Obtain user info by their id
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the user you wish to obtain info about
          required: true
          type: number
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: User not found
    post:
      tags:
        - Main API
      summary: Add a new User
      description: ''
      operationId: addUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the user you wish to obtain info about
          required: true
          type: number
        - in: body
          name: body
          description: JSON object representing the user values
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/User'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/InvalidInput'
    delete:
      tags:
        - Main API
      summary: Delete user by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the user that needs to be deleted
          required: true
          type: number
      responses:
        '200':
          description: Succesfully deleted User
        '404':
          description: User not found
    put:
      tags:
        - Main API
      summary: Update a user
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the user that needs to be deleted
          required: true
          type: number
        - in: body
          name: body
          description: Updated user object
          required: true
          type: object
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UpdatedRows'
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
definitions:
  User:
    type: object
    properties:
      id:
        type: number
      username:
        type: string
      longitude:
        type: string
      latitude:
        type: string
      timestamp:
        type: string
  UserUpdate:
    type: object
    properties:
      username:
        type: string
      longitude:
        type: string
      latitude:
        type: string
  InvalidInput:
    type: object
    properties:
      error:
        type: string
  UpdatedRows:
    type: object
    properties:
      UpdatedRows:
        type: number
